; Microcode.txt
; Version 0.01
; 2017-05-21 

;
; Format:
;	- pCode
;	- short description
;	- long description
;	- size
;	- registers affected
;

0
halt
Stop the VM
1


1
irq
Interrupt request
1


2
alloc               {0}
Allocate memory on the stack
2
SP

3
decr                SP, {0}
Decrement the stack pointer
2
SP

4
pack                BX
Pack the BX register into the A0 register
1
A0

5
unpack              BX
Unpack the A0 register into the BX register
1
BX

6
point               Global {0}
Point to a global object
2
BX

7
point               Macro + {0}
Point to an object at the macro level
2
BX

8
point               BP + {0}
Point to an object on the stack using BP as an index
2
BX

9
point               SP + {0}
Point to an object on the stack using SP as an index
2
BX

10
point               Micro + {0}
Point to an object at the micro level
2
BX

11
point               BX
Indirect point the BX register
1
BX

12
bFree
Free the pointer in the A0 register
1


13
bFree				A1
Free the pointer in the A1 register
1


14
this
Loads id into the A0 register
1
A0

15
task
Loads task id into the A0 register
1
A0

16
new                 alias {0}
Spawn a new object
2
A0

17
copy
Copy the object in the A0 register
1


18
adopt
Adopt the object in the A0 register
1


19
assign
Assign the object in the A0 register to pointer BX
1
A0

20
free
Free the object in the A0 register
1
A0

21
free                A1
Free the object in the A1 register
1


22
freeOnError
Free the object in the A0 register if there was an error
1
A0

23
class               A0, alias {0}
Load a class into the A0 register
2
A0

24
const               A0, {0}
Load an integer constant into the A0 register
2
A0

25
const               A1, {0}
Load an integer constant into the A1 register
2


26
load                A0
Load an integer into the A0 register
1
A0

27
load                A1
Load an integer into the A1 register
1


28
boolean
Convert the integer in the A0 register to a boolean
1
A0

29
store               A0
Store the A0 register
1


30
store               A1
Store the A1 register
1


31
move                A0, A1
Move the A1 register to the A0 register
1
A0

32
move                A1, A0
Move the A0 register to the A1 register
1


33
push                A0
Push the A0 register onto the stack
1
SP

34
push                A1
Push the A1 register onto the stack
1
SP

35
pop                 A0
Pop an integer off the stack and into the A0 register
1
A0,SP

36
pop                 A1
Pop an integer off the stack and into the A1 register
1
SP

37
move                A0, D0
Move the D0 register to the A0 register
1
A0

38
move                A1, D1
Move the D1 register to the A1 register
1


39
neg                 A0
Negate the A0 register
1
A0

40
neg                 A1
Negate the A1 register
1


41
not                 A0
Binary NOT the A0 register
1
A0

42
not                 A1
Binary NOT the A1 register
1


43
inc                 A0
Increment the A0 register
1
A0

44
inc                 A1
Increment the A1 register
1


45
dec                 A0
Decrement the A0 register
1
A0

46
dec                 A1
Decrement the A1 register
1


47
abs
ABS function
1
A0

48
sgn
SGN function
1
A0

49
add
Add the A0 register and A1 register together
1
A0

50
sub
Subtract the A1 register from the A0 register
1
A0

51
mod
Give the remainder when the A0 register is divided by the A1 register
1
A0

52
mult
Multiply the A0 register by the A1 register
1
A0

53
div
Divide the A0 register by the A1 register
1
A0

54
power
Raise the A0 register to the A1 register's power
1
A0

55
shl
Shift the A0 register left by A1 bits
1
A0

56
shr
Shift the A0 register right by A1 bits
1
A0

57
shlConst            {0}
Shift the A0 register left by x bits
2
A0
 
58
shrConst            {0}
Shift the A0 register right by x bits
2
A0

59
equal
=
1
A0

60
notEqual
!=
1
A0

61
less
<
1
A0

62
lessEqual
<=
1
A0

63
greater
>
1
A0

64
greaterEqual
>=
1
A0

65
binaryAnd
Binary AND
1
A0

66
binaryOr
Binary OR
1
A0

67
binaryXor
Binary XOR
1
A0

68
logicalNot
Logical NOT
1
A0

69
logicalAnd
Logical AND
1
A0

70
logicalOr
Logical OR
1
A0

71
logicalXor
Logical XOR
1
A0

72
dConstFloat         D0, {f}
Load a float constant into the D0 register
2
D0

73
dConstFloat         D1, {f}
Load a float constant into the D1 register
2


74
dLoadFloat          D0
Load a float into the D0 register
1
D0

75
dLoadInt            D0
Load an integer into the D0 register
1
D0

76
dLoadFloat          D1
Load a float into the D1 register
1


77
dLoadInt            D1
Load an integer into the D1 register
1


78
dStoreFloat         D0
Store the D0 register as a float
1


79
dStoreFloat         D1
Store the D1 register as a float
1


80
move                D0, D1
Move the D1 register to the D0 register
1
D0

81
move                D1, D0
Move the D0 register to the D1 register
1


82
dPushFloat          D0
Push the D0 register onto the stack
1
SP

83
dPushFloat          D1
Push the D1 register onto the stack
1
SP

84
dPopFloat           D0
Pop a float off the stack and into the D0 register
1
D0,SP

85
dPopFloat           D1
Pop a float off the stack and into the D1 register
1
SP

86
move                D0, A0
Move the A0 register to the D0 register
1
D0

87
move                D1, A1
Move the A1 register to the D1 register
1


88
dNeg                D0
Negate the D0 register
1
D0

89
dNeg                D1
Negate the D1 register
1


90
dInc                D0
Increment the D0 register
1
D0

91
dInc                D1
Increment the D1 register
1


92 
dDec                D0
Decrement the D0 register
1
D0

93 
dDec                D1
Decrement the D1 register
1


94 
dInt
INT function
1
D0

95
dAbs
ABS function
1
D0

96
dSgn
SGN function
1
D0

97
dVal
VAL function
1
D0

98
dFrac
FRAC function
1
D0

99
dCeil
CEIL function
1
D0

100
dFix
FIX function
1
D0

101
dRound
ROUND function
1
D0

102
dTan
TAN function
1
D0

103
dAtn
ATN function
1
D0

104
dCos
COS function
1
D0

105
dSin
SIN function
1
D0

106
dExp
EXP function
1
D0

107
dExp2
EXP2 function
1
D0

108
dExp10
EXP10 function
1
D0

109
dLog
LOG function
1
D0

110
dLog2
LOG2 function
1
D0

111
dLog10
LOG10 function
1
D0

112
dSq
SQ function
1
D0

113
dSqrt
SQRT function
1
D0

114
dAdd
Add the D0 and D1 registers together
1
D0

115
dSub
Subtract the D1 register from the D0 register
1
D0

116
dMod
Give the remainder when the D0 register is divided by the D1 register
1
D0

117
dMult
Multiply the D0 register by the D1 register
1
D0

118
dDiv
Divide the D0 register by the D1 register
1
D0

119
dPower
Raise the D0 register to the D1 register's power
1
D0

120
dEqual
=
1
A0

121
dNotEqual
!=
1
A0

122
dLess
<
1
A0

123
dLessEqual
<=
1
A0

124
dGreater
>
1
A0

125
dGreaterEqual
>=
1
A0

126
wConst              A0, "{s}"
Create a string using a string literal
2
A0

127
wConst              A1, "{s}"
Create a string using a string literal
2


128
wClone              A0
Clone the string in the A0 register
1
A0

129
wClone              A1
Clone the string in the A1 register
1


130
wJoin
Join the string in the A1 register to the string in the A0 register
1


131
wStr                A0
Convert the integer in the A0 register into a string
1
A0

132
wStrFloat           D0
Convert the float in the D0 register into a string
1
A0

133
wAdopt
Adopt the string in the A0 register
1


134
wAssign
Assign the string in the A0 register to pointer BX
1
A0

135
wFree
Free the string in the A0 register
1
A0

136
wFree               A1
Free the string in the A1 register
1


137
wEqual
=
1
A0

138
wNotEqual
!=
1
A0

139
wLess
<
1
A0

140
wGreater
>
1
A0

141
jump                {0}
Perform a relative jump
2


142
jumpFalse           {0}
Perform a relative jump if the A0 register is false
2


143
jumpTrue            {0}
Perform a relative jump if the A0 register is true
2


144
gosub               {0}
Perform a relative jump to a subroutine
2
A0,BX,C0,D0,SP

145
return
Return from a subroutine
1
SP

146
stub                alias {0}
Call a native stub
2
A0,C0,D0,SP

147
call                {0}
Call a function
2
BX,SP

148
vTable              alias {0}
Invoke a virtual method
2
A0,BX,C0,D0,SP

149
stubClass           alias {0}: alias {1}
Call a class's native stub
3
A0,C0,D0,SP

150
callClass           alias {0}: {1}
Call a class's function
3
BX,SP

151
vTableClass         alias {0}: alias {1}
Invoke a class's virtual method
3
A0,BX,C0,D0,SP

152
api                 alias {0}
Call an API function
2
A0,C0,D0,SP

153
endFunc
End a function
1
SP

154
throw
Throw an exception
1
A0

155
byte
Convert the integer in the A0 register to a byte
1
A0

156
byte                A1
Convert the integer in the A1 register to a byte
1


157
short
Convert the integer in the A0 register to a short integer
1
A0

158
short               A1
Convert the integer in the A1 register to a short integer
1


159
move                A0, C0
Move the C0 register to the A0 register
1
A0

160
move                A1, C1
Move the C1 register to the A1 register
1


161
move                C0, A0
Move the A0 register to the C0 register
1
C0

162
move                C1, A1
Move the A1 register to the C1 register
1


163
move                D0, C0
Move the C0 register to the D0 register
1
D0

164
move                D1, C1
Move the C1 register to the D1 register
1


165
move                C0, D0
Move the D0 register to the C0 register
1
C0

166
move                C1, D1
Move the D1 register to the C1 register
1


167
move                C0, C1
Move the C1 register to the C0 register
1
C0

168
move                C1, C0
Move the C0 register to the C1 register
1


169
wstr                C0
Convert the long in the C0 register to a string
1
A0,C0

170
qConst              C0, {L}
Load a long constant into the C0 register
3
C0

171
qConst              C1, {L}
Load a long constant into the C1 register
3


172
qLoad               C0
Load a long into the C0 register
1
C0

173
qLoadInt            C0
Load an integer into the C0 register
1
C0

174
qLoad               C1
Load a long into the C1 register
1


175
qLoadInt            C1
Load an integer into the C1 register
1


176
qPush               C0
Push the C0 register onto the stack
1
SP

177
qPush               C1
Push the C1 register onto the stack
1
SP

178
qPop                C0
Pop a long off the stack and into the C0 register
1
C0,SP

179
qPop                C1
Pop a long off the stack and into the C1 register
1
SP

180
qNeg                C0
Negate the C0 register
1
C0

181
qNeg                C1
Negate the C1 register
1
C0

182
qNot                C0
Binary NOT the C0 register
1
C0

183
qNot                C1
Binary NOT the C1 register
1


184
qInc                C0
Increment the C0 register
1
C0

185
qInc                C1
Increment the C1 register
1


186
qDec                C0
Decrement the C0 register
1
C0

187
qDec                C1
Decrement the C1 register
1


188
qAbs                C0
ABS function
1
C0

189
qSgn                C0
SGN function
1
C0

190
qAdd
Add the C0 register and C1 register together
1
C0

191
qSub
Subtract the C1 register from the C0 register
1
C0

192
qMod
Give the remainder when the C0 register is divided by the C1 register
1
C0

193
qMult
Multiply the C0 register by the C1 register
1
C0

194
qDiv
Divide the C0 register by the C1 register
1
C0

195
qPower
Raise the C0 register to the C1 register's power
1
C0

196
qShl
Shift the C0 register left by C1 bits
1
C0

197
qShr
Shift the C0 register right by C1 bits
1
C0

198
qShlConst           {0}
Shift the C0 register left by x bits
2
C0

199
qShrConst           {0}
Shift the C0 register right by x bits
2
C0

200
qEqual
=
1
A0

201
qNotEqual
!=
1
A0

202
qLess
<
1
A0

203
qLessEqual
<=
1
A0

204
qGreater
>
1
A0

205
qGreaterEqual
>=
1
A0

206
qAnd
Binary AND
1
C0

207
qOr
Binary OR
1
C0

208
qXor
Binary XOR
1
C0

209
qAdopt
Adopt the long in the C0 register
1


210
qAssign
Assign the long in the C0 register to pointer BX
1


211
qFree
Free the long in the A0 register
1
A0

212
qFree               A1
Free the long in the A1 register
1


213
qBoolean
Convert the long in the C0 register to a boolean
1
C0

214
qByte
Convert the long in the C0 register to a byte
1
C0

215
qShort
Convert the long in the C0 register to a short
1
C0

216
qInt
Convert the long in the C0 register to an integer
1
C0

217
wstr                D0
Convert the double in the D0 register to a string
1
A0

218
dConst              D0, {d}
Load a double constant into the D0 register
3
D0

219
dConst              D1, {d}
Load a double constant into the D1 register
3


220
dLoad               D0
Load a double into the D0 register
1
D0

221
dLoadInt64          D0
Load a long into the D0 register
1
D0

222
dLoad               D1
Load a double into the D1 register
1


223
dLoadInt64          D1
Load a long into the D1 register
1


224
dPush               D0
Push the D0 register onto the stack
1
SP

225
dPush               D1
Push the D1 register onto the stack
1
SP

226
dPop                D0
Pop a double off the stack and into the D0 register
1
D0,SP

227
dPop                D1
Pop a double off the stack and into the D1 register
1
SP

228
dAdopt
Adopt the double in the D0 register
1


229
dAssign
Assign the double in the D0 register to pointer BX
1


230
dFree
Free the double in the A0 register
1
A0

231
dFree               A1
Free the double in the A1 register
1


232
xChg
Exchange the top two values on the stack
1
SP

